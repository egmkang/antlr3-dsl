/** \file
 *  This C header file was generated by $ANTLR version 3.3 Nov 30, 2010 12:45:30
 *
 *     -  From the grammar source file : D:\\message\\Message.g
 *     -                            On : 2013-08-30 12:48:28
 *     -                for the parser : MessageParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser MessageParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pMessageParser, which is returned from a call to MessageParserNew().
 *
 * The methods in pMessageParser are  as follows:
 *
 *  - MessageParser_prog_return      pMessageParser->prog(pMessageParser)
 *  - MessageParser_forward_decl_return      pMessageParser->forward_decl(pMessageParser)
 *  - MessageParser_typedef_decl_return      pMessageParser->typedef_decl(pMessageParser)
 *  - MessageParser_packages_return      pMessageParser->packages(pMessageParser)
 *  - MessageParser_include_return      pMessageParser->include(pMessageParser)
 *  - MessageParser_enum_decl_return      pMessageParser->enum_decl(pMessageParser)
 *  - MessageParser_struct_decl_return      pMessageParser->struct_decl(pMessageParser)
 *  - MessageParser_message_decl_return      pMessageParser->message_decl(pMessageParser)
 *  - MessageParser_message_field_return      pMessageParser->message_field(pMessageParser)
 *  - MessageParser_enable_if_return      pMessageParser->enable_if(pMessageParser)
 *  - MessageParser_field_decl_return      pMessageParser->field_decl(pMessageParser)
 *  - MessageParser_enum_field_decl_return      pMessageParser->enum_field_decl(pMessageParser)
 *  - MessageParser_default_decl_return      pMessageParser->default_decl(pMessageParser)
 *  - MessageParser_array_decl_return      pMessageParser->array_decl(pMessageParser)
 *  - MessageParser_default_expr_decl_return      pMessageParser->default_expr_decl(pMessageParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_MessageParser_H
#define _MessageParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct MessageParser_Ctx_struct MessageParser, * pMessageParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct MessageParser_prog_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MessageParser_prog_return;

typedef struct MessageParser_forward_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MessageParser_forward_decl_return;

typedef struct MessageParser_typedef_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MessageParser_typedef_decl_return;

typedef struct MessageParser_packages_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MessageParser_packages_return;

typedef struct MessageParser_include_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MessageParser_include_return;

typedef struct MessageParser_enum_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MessageParser_enum_decl_return;

typedef struct MessageParser_struct_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MessageParser_struct_decl_return;

typedef struct MessageParser_message_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MessageParser_message_decl_return;

typedef struct MessageParser_message_field_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MessageParser_message_field_return;

typedef struct MessageParser_enable_if_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MessageParser_enable_if_return;

typedef struct MessageParser_field_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MessageParser_field_decl_return;

typedef struct MessageParser_enum_field_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MessageParser_enum_field_decl_return;

typedef struct MessageParser_default_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MessageParser_default_decl_return;

typedef struct MessageParser_array_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MessageParser_array_decl_return;

typedef struct MessageParser_default_expr_decl_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    MessageParser_default_expr_decl_return;



/** Context tracking structure for MessageParser
 */
struct MessageParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     MessageParser_prog_return (*prog)	(struct MessageParser_Ctx_struct * ctx);
     MessageParser_forward_decl_return (*forward_decl)	(struct MessageParser_Ctx_struct * ctx);
     MessageParser_typedef_decl_return (*typedef_decl)	(struct MessageParser_Ctx_struct * ctx);
     MessageParser_packages_return (*packages)	(struct MessageParser_Ctx_struct * ctx);
     MessageParser_include_return (*include)	(struct MessageParser_Ctx_struct * ctx);
     MessageParser_enum_decl_return (*enum_decl)	(struct MessageParser_Ctx_struct * ctx);
     MessageParser_struct_decl_return (*struct_decl)	(struct MessageParser_Ctx_struct * ctx);
     MessageParser_message_decl_return (*message_decl)	(struct MessageParser_Ctx_struct * ctx);
     MessageParser_message_field_return (*message_field)	(struct MessageParser_Ctx_struct * ctx);
     MessageParser_enable_if_return (*enable_if)	(struct MessageParser_Ctx_struct * ctx);
     MessageParser_field_decl_return (*field_decl)	(struct MessageParser_Ctx_struct * ctx);
     MessageParser_enum_field_decl_return (*enum_field_decl)	(struct MessageParser_Ctx_struct * ctx);
     MessageParser_default_decl_return (*default_decl)	(struct MessageParser_Ctx_struct * ctx);
     MessageParser_array_decl_return (*array_decl)	(struct MessageParser_Ctx_struct * ctx);
     MessageParser_default_expr_decl_return (*default_expr_decl)	(struct MessageParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct MessageParser_Ctx_struct * ctx);
    void	    (*free)   (struct MessageParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pMessageParser MessageParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pMessageParser MessageParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define EOF      -1
#define T__24      24
#define T__25      25
#define T__26      26
#define T__27      27
#define T__28      28
#define T__29      29
#define T__30      30
#define T__31      31
#define T__32      32
#define FORWARD      4
#define ENUM      5
#define ID      6
#define STRUCT      7
#define COMMENT      8
#define TYPEDEF      9
#define PACKAGES      10
#define PATH      11
#define INCLUDE      12
#define MESSAGE      13
#define ENABLEIF      14
#define OP      15
#define INT      16
#define FIELD      17
#define FIELD_ENUM      18
#define FIELD_DEFAULT      19
#define ARRAY      20
#define LQUO      21
#define LBRACKET      22
#define WS      23
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for MessageParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
